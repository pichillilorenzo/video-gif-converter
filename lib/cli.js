#!/usr/bin/env node
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const commander_1=require("commander"),glob_1=require("glob"),index_1=require("./index"),Bar=require("progress-barjs"),program=new commander_1.Command;async function convertFiles(t){const o={...program.opts()};if(t){const i=glob_1.glob.sync(`${t}`,{absolute:!0});console.log(`${i.length} file${i.length!==1?"s":""} found!`);const r=Bar({label:`Convert to .${o.convertTo===index_1.VideoGifConverterConvertType.gif?"gif":o.format}`,info:"Processing",total:i.length}),n=new index_1.VideoGifConverter(o);n.on("progress",()=>{r.tick("")}),console.log("Start processing...");const e=await n.run(i);e.failed>0&&console.error(`\u26A0\uFE0F ${e.failed} file${e.failed!==1?"s":""} failed. \u26A0\uFE0F`),e.completed>0&&(console.log(`\u{1F389} ${e.completed} file${e.completed!==1?"s have":" had"} been converted with success. \u{1F389}`),o.output&&console.log(`Files saved at: ${o.output}`))}else throw Error("Empty glob pattern!")}async function run(){const t=new commander_1.Option("-ct, --convert-to <type>","Convert to gif or video.").default(index_1.VideoGifConverterConvertType.gif).choices(Object.values(index_1.VideoGifConverterConvertType));t.required=!0,program.argument("<pattern>","Glob pattern of input files. Surround the glob pattern with quotes (example './test/**/*.mp4').").description(`Examples: 
  video-gif-converter --gifski -q 100 -o './test/output' './test/video.mp4'
  video-gif-converter --use-palette -o './test/output' './test/video.mp4'
  video-gif-converter --fps 10 './test/**/*.mp4'
  vvideo-gif-converter --convert-to video --format mp4 'test/**/*.gif'`).addOption(t).option("-o, --output <path>","Output folder path.").option("-f, --format <format>","Output video format. Used and required only if --convert-to is video.").option("-r, --fps <fps>","Output framerate.").option("-s, --size <size>","Output frame size (examples: 640x480, 640x?, 50%).").option("-a, --aspect <aspect>","Output frame aspect ratio (examples: 4:3, 16:9).").option("-g, --gifski","Use gifski to generate GIF").option("-q, --quality <1-100>","GIF output quality used by gifski").option("-df, --delete-frames","Delete generated frames used by gifski",!0).option("-vc, --video-codec <codec>","Video codec (examples: mpeg4, libx264).").option("-vb, --video-bitrate <bitrate>","Sets the target video bitrate in kbps. The bitrate argument may be a number or a string with an optional k suffix.").option("-vbk, --video-bitrate-constant","The constant argument specifies whether a constant bitrate should be enforced.",!1).option("-d, --duration <seconds>","Forces ffmpeg to stop transcoding after a specific output duration. The time parameter may be a number (in seconds) or a timestamp string (with format [[hh:]mm:]ss[.xxx]).").option("-st, --start-time <seconds>","Seeks an input and only start decoding at given time offset. The time argument may be a number (in seconds) or a timestamp string (with format [[hh:]mm:]ss[.xxx]).").option("-l, --loop <times>","Set the number of times to loop the output. Use -1 for no loop, 0 for looping indefinitely (default).").option("-up, --use-palette","Use ffmpeg palettegen and paletteuse filters to generate high quality GIF without gifski.").action(convertFiles),await program.parseAsync()}run();